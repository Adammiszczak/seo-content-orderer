{"version":3,"sources":["components/InputOrder/InputOrder.js","components/InputOrder/LpInputOrder.js","components/Order/Order.js","App.js","serviceWorker.js","index.js"],"names":["InputOrder","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Fragment","className","onSubmit","submitDomainData","htmlFor","type","id","onChange","handleChangeClient","name","value","domainUrl","placeholder","industry","isNew","disabled","style","fontSize","Component","LpInputOrder","allLandings","landingPage","lpUrl","phrases","content","signs","rdySubmit","submitLpData","handleChange","rows","onClick","finalizeOrder","Order","event","preventDefault","setState","newDomainData","target","objectSpread","clientData","defineProperty","checked","newLanding","concat","toConsumableArray","liftingState","components_InputOrder_InputOrder","InputOrder_LpInputOrder","length","App","startHandler","startScreen","components_Order_Order","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10bd80e3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass InputOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // clientData: {\r\n            //     domainUrl: '',\r\n            //     industry: '',\r\n            //     isNew: ''\r\n            // },\r\n\r\n        };\r\n    }\r\n\r\n    // submitDomainData = (event) => {\r\n    //     event.preventDefault();\r\n\r\n    //     this.setState({\r\n    //         disabled: !this.state.disabled,\r\n    //         rdySubmit: true,\r\n    //     })\r\n    // }\r\n\r\n    // handleChangeClient = (event) => {\r\n\r\n    //     let newDomainData;\r\n\r\n    //     if (event.target.name === 'isNew') {\r\n\r\n    //         newDomainData = {\r\n    //             ...this.state.clientData,\r\n    //             [event.target.name]: event.target.checked\r\n    //         }\r\n\r\n    //     } else {\r\n\r\n    //         newDomainData = {\r\n    //             ...this.state.clientData,\r\n    //             [event.target.name]: event.target.value\r\n    //         }\r\n\r\n    //     }\r\n\r\n    //     this.setState({\r\n    //         clientData: newDomainData\r\n    //     })\r\n\r\n    // }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <h3 className=\"pb-5\">General Client Data</h3>\r\n                <form onSubmit={this.props.submitDomainData} className=\"w-75 mx-auto\">\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"domainUrl\">Domain URL:</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"domainUrl\"\r\n                                onChange={this.props.handleChangeClient}\r\n                                name=\"domainUrl\"\r\n                                value={this.props.domainUrl}\r\n                                placeholder=\"e.g. https://xyz.com/\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"industry\">Type of Industry:</label>\r\n                        <div className=\"col-sm-9\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"industry\"\r\n                                onChange={this.props.handleChangeClient}\r\n                                name=\"industry\"\r\n                                value={this.props.industry}\r\n                                placeholder=\"e.g. weddings in poznan, wedding parties poznan, bridal parties poznan\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row\">\r\n                        <div className=\"col-sm-3\">Is client new?</div>\r\n                        <div className=\"col-sm-2 d-flex justify-content-start\">\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    id=\"isNew\"\r\n                                    onChange={this.props.handleChangeClient}\r\n                                    name=\"isNew\"\r\n                                    value={this.props.isNew}/>\r\n                                <label className=\"form-check-label\" htmlFor=\"isNew\">\r\n                                    Check if new\r\n                                </label>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row\">\r\n                        <div className=\"col-sm-12\">\r\n                            {this.props.disabled === false && <button type=\"submit\" className=\"btn btn-primary\">Save Data</button>\r\n}\r\n                            {this.props.disabled !== false && <button disabled type=\"submit\" className=\"btn btn-primary\">Save Data</button>\r\n}\r\n{this.props.disabled ? <React.Fragment><div><span style={{fontSize : '20px',}} className=\"badge badge-info my-2 p-2\">Go to next part!</span></div></React.Fragment> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                {/* <button onClick={this.props.stateLifter}>TEST BTN</button> */}\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputOrder;","import React, {Component} from 'react';\r\n\r\nclass LpInputOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allLandings: [],\r\n            landingPage : {\r\n                lpUrl: '',\r\n                phrases: '',\r\n                content: '',\r\n                signs: ''\r\n            },\r\n            rdySubmit: false,\r\n\r\n        };\r\n    }\r\n\r\n    // handleChange = (event) => {\r\n\r\n    //     let newLanding;\r\n        \r\n    //     newLanding = {\r\n    //         ...this.state.landingPage,\r\n    //         [event.target.name] : event.target.value,\r\n    //     };\r\n\r\n    //     this.setState({\r\n            \r\n    //         landingPage : newLanding,\r\n            \r\n    //     })\r\n\r\n    // }\r\n\r\n    // submitLpData = (event) => {\r\n        \r\n    //     event.preventDefault();\r\n\r\n    //     let newLanding = {\r\n    //         ...this.state.landingPage\r\n    //     };\r\n\r\n    //     this.setState({\r\n    //         allLandings: [...this.state.allLandings,\r\n    //             newLanding],\r\n    //             landingPage : {\r\n    //                 lpUrl: '',\r\n    //                 phrases: '',\r\n    //                 content: '',\r\n    //                 signs: ''\r\n    //             },\r\n    //             rdySubmit: true,\r\n    //     })\r\n\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h3 className=\"my-5\">Specific Landing Pages Data</h3>\r\n                <form onSubmit={this.props.submitLpData} className=\"w-75 mx-auto\">\r\n                <div className=\"form-group row\">\r\n                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"lpUrl\">Landing Page URL:</label>\r\n                    <div className=\"col-sm-9\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"lpUrl\"\r\n                            onChange={this.props.handleChange}\r\n                            name=\"lpUrl\"\r\n                            value={this.props.lpUrl}\r\n                            placeholder=\"e.g. https://xyz.com/wedding-parties-poznan/\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"phrases\">Phrases for Landing Page</label>\r\n                    <div className=\"col-sm-9\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"phrases\"\r\n                            onChange={this.props.handleChange}\r\n                            name=\"phrases\"\r\n                            value={this.props.phrases}\r\n                            placeholder=\"e.g. wedding parties poznan, bridal parties poznan, cheap wedding party poznan, best bridal party poznan\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"content\">Heading, paragraphs, sections</label>\r\n                    <textarea\r\n                        placeholder=\"H1: Wedding parties Poznan\r\nGenerally about this type of parties, about companies at Poznan etc\r\n1000 signs\r\nH2: Why you should choose wedding parties in Poznan with Johns Weddings?\r\nClient advantages, experience, positive reviews, about organization\r\n1000-1500 signs \"\r\n                        className=\"form-control\"\r\n                        id=\"content\"\r\n                        onChange={this.props.handleChange}\r\n                        name=\"content\"\r\n                        value={this.props.content}\r\n                        rows=\"6\"></textarea>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"signs\">Approximately number of signs</label>\r\n                    <div className=\"col-sm-9\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"signs\"\r\n                            onChange={this.props.handleChange}\r\n                            name=\"signs\"\r\n                            value={this.props.signs}\r\n                            placeholder=\"e.g. 1500-2000\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Save LP Data</button>\r\n                            {this.props.allLandings >= 1 ? <button onClick={this.props.finalizeOrder} type=\"button\" className=\"btn btn-danger mx-2\">Finish Order!</button> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LpInputOrder;","import React, {Component} from 'react';\r\nimport './Order.css';\r\nimport InputOrder from '../InputOrder/InputOrder'\r\nimport LpInputOrder from '../InputOrder/LpInputOrder';\r\n\r\nclass Order extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            liftingState: 'Initial state',\r\n            rdySubmit: false,\r\n            clientData: {\r\n                domainUrl: '',\r\n                industry: '',\r\n                isNew: ''\r\n            },\r\n            allLandings: [],\r\n            landingPage : {\r\n                lpUrl: '',\r\n                phrases: '',\r\n                content: '',\r\n                signs: ''\r\n            },\r\n            disabled: false,\r\n        }\r\n            \r\n        };\r\n    \r\n\r\n    // stateLifter = () => {\r\n    //     this.setState({liftingState: 'The Lifting is Live Bitch'})\r\n    // }\r\n\r\n   // INPUT ORDER START\r\n\r\n    submitDomainData = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            disabled: !this.state.disabled,\r\n            rdySubmit: true,\r\n        })\r\n    }\r\n\r\n    handleChangeClient = (event) => {\r\n\r\n        let newDomainData;\r\n\r\n        if (event.target.name === 'isNew') {\r\n\r\n            newDomainData = {\r\n                ...this.state.clientData,\r\n                [event.target.name]: event.target.checked\r\n            }\r\n\r\n        } else {\r\n\r\n            newDomainData = {\r\n                ...this.state.clientData,\r\n                [event.target.name]: event.target.value\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({clientData: newDomainData})\r\n\r\n    }\r\n\r\n    // INPUT ORDER END\r\n\r\n    // LP-INPUT ORDER START\r\n\r\n\r\n    submitLpData = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        let newLanding = {\r\n            ...this.state.landingPage\r\n        };\r\n\r\n        this.setState({\r\n            allLandings: [...this.state.allLandings,\r\n                newLanding],\r\n                landingPage : {\r\n                    lpUrl: '',\r\n                    phrases: '',\r\n                    content: '',\r\n                    signs: ''\r\n                },\r\n                rdySubmit: true,\r\n        })\r\n\r\n    }\r\n\r\n    \r\n    handleChange = (event) => {\r\n\r\n        let newLanding;\r\n        \r\n        newLanding = {\r\n            ...this.state.landingPage,\r\n            [event.target.name] : event.target.value,\r\n        };\r\n\r\n        this.setState({\r\n            \r\n            landingPage : newLanding,\r\n            \r\n        })\r\n\r\n    }\r\n\r\n     // LP-INPUT ORDER END\r\n\r\n     // FINALIZE ORDER\r\n\r\n     finalizeOrder = () => {\r\n         \r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"orderMain\">\r\n                <h1 className=\"py-5 m-0\">Start making your order!</h1>\r\n                <InputOrder\r\n                    // stateLifter={this.stateLifter}\r\n                    disabled={this.state.disabled}\r\n                    submitDomainData={this.submitDomainData}\r\n                    handleChangeClient={this.handleChangeClient}\r\n                    domainUrl={this.state.clientData.domainUrl}\r\n                    industry={this.state.clientData.industry}\r\n                    isNew={this.state.clientData.isNew}\r\n                    />\r\n                <LpInputOrder \r\n                submitLpData={this.submitLpData}\r\n                handleChange={this.handleChange}\r\n                lpUrl={this.state.landingPage.lpUrl}\r\n                phrases={this.state.landingPage.phrases}\r\n                content={this.state.landingPage.content}\r\n                signs={this.state.landingPage.signs}\r\n                allLandings={this.state.allLandings.length}\r\n                finalizeOrder={this.finalizeOrder}\r\n                /> \r\n                \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Order;","import React from 'react';\nimport './App.css';\nimport Order from './components/Order/Order'\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            startScreen: false\n        }\n    }\n\n    startHandler = () => {\n\n        this.setState({\n            startScreen: !this.startScreen\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n\n                    {this.state.startScreen === false && \n                      <header className=\"App-header\">\n                        <h1>SEO Content Orderer!</h1>\n                        <button onClick={this.startHandler} className=\"btn btn-light\">Press to Start!</button>\n                    </header>\n                  }\n                    {this.state.startScreen !== false && \n                      <Order/>\n                    }\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}